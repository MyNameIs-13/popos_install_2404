---
- name: Scrape URL for latest version
  ansible.builtin.uri:
    url: https://data.services.jetbrains.com/products/releases?code=PCC&platform=linux&latest=true&type=release
    return_content: true
    validate_certs: false
  register: pycharm_latest
  until: pycharm_latest.status == 200
  retries: 5
  delay: 5 # Every 5 seconds
  ignore_errors: "{{ ansible_check_mode }}"
  tags: gui

- name: Split version out
  ansible.builtin.set_fact:
    pycharm_latest_version: "{{ pycharm_latest.json.PCC.0.version }}"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: gui

- name: Find the pycharm directory with version number
  ansible.builtin.find:
    paths: /opt/
    patterns: "pycharm-community-*"
    file_type: directory
  register: pycharm_found_directories
  tags: gui

- name: Extract path and version number
  ansible.builtin.set_fact:
    pycharm_path: "{{ item.path }}"
    pycharm_installed_version: "{{ (item.path | regex_search('pycharm-community-(.*)', '\\1')) | first }}"
  with_items: "{{ pycharm_found_directories.files }}"
  register: pycharm_info
  tags: gui
  when: item.path is search('^/opt/pycharm-community-')

- name: Set installed_version when not installed
  ansible.builtin.set_fact:
    pycharm_installed_version: "not installed"
  tags: gui
  when: pycharm_installed_version is not defined

- name: Display the pycharm version
  ansible.builtin.debug:
    msg:
      - "installed: {{ pycharm_installed_version }}"
      - "available: {{ pycharm_latest_version }}"
  ignore_errors: "{{ ansible_check_mode }}"
  tags: gui

- name: When there is no installed_version or it's contents don't match, do these
  ignore_errors: "{{ ansible_check_mode }}"
  tags: gui
  when: pycharm_installed_version != pycharm_latest_version
  block:
    - name: Delete previous version
      ansible.builtin.file:
        path: "{{ pycharm_path }}"
        state: absent
      when: pycharm_path is defined

    - name: Display the pycharm download link
      ansible.builtin.debug:
        msg:
          - "pycharm download link"
          - "https://download.jetbrains.com/python/pycharm-community-{{ pycharm_latest_version }}.tar.gz"
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Download tarball
      ansible.builtin.get_url:
        url: "https://download.jetbrains.com/python/pycharm-community-{{ pycharm_latest_version }}.tar.gz"
        dest: /tmp/pycharm-community.tar.gz
        timeout: 800
        mode: '0644'
        owner: root
        group: root
      register: pycharm_download
      until: "pycharm_download is not failed"
      retries: 3
      delay: 10
      when: ansible_architecture == "x86_64"

    - name: Download tarball
      ansible.builtin.get_url:
        url: "https://download.jetbrains.com/python/pycharm-community-{{ pycharm_latest_version }}-aarch64.tar.gz"
        dest: /tmp/pycharm-community.tar.gz
        timeout: 800
        mode: '0644'
        owner: root
        group: root
      register: pycharm_download
      until: "pycharm_download is not failed"
      retries: 3
      delay: 10
      ignore_errors: true
      when: ansible_architecture == "aarch64"

    - name: Extract tarball
      ansible.builtin.unarchive:
        src: /tmp/pycharm-community.tar.gz
        dest: /opt/
        mode: '0755'
        owner: root
        group: root
      when: pycharm_download is not failed

    - name: Remove /tmp/pycharm-community.tar.gz after unarchiving
      ansible.builtin.file:
        path: /tmp/pycharm-community.tar.gz
        state: absent

    - name: Create a symbolic link to that pycharm is in $PATH
      ansible.builtin.file:
        src: /opt/pycharm-community-{{ pycharm_latest_version }}/bin/pycharm
        dest: /usr/local/bin/pycharm
        state: link
      when: pycharm_download is not failed

    - name: Create desktop file
      ansible.builtin.template:
        src: pycharm.desktop.j2
        dest: /usr/share/applications/pycharm.desktop
        mode: '0644'
        owner: root
        group: root
      when: pycharm_download is not failed
